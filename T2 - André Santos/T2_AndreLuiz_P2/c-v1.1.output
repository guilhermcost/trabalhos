Terminals unused in grammar

    CONST
    ERROR
    FOR


State 98 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration-list declaration
    3                 | declaration

    4 declaration: var-declaration
    5            | fun-declaration

    6 var-declaration: type-specifier ID SEMICOLON
    7                | type-specifier ID LBRAK NUM RBRAK SEMICOLON

    8 type-specifier: INT
    9               | VOID

   10 fun-declaration: type-specifier ID LP params RP compound-stmt

   11 params: param-list
   12       | VOID

   13 param-list: param-list COMMA param
   14           | param

   15 param: type-specifier ID
   16      | type-specifier ID LBRAK RBRAK

   17 compound-stmt: LBRACE local-declarations statement-list RBRACE

   18 local-declarations: local-declarations var-declaration
   19                   | ε

   20 statement-list: statement-list statement
   21               | ε

   22 statement: expression-stmt
   23          | compound-stmt
   24          | selection-stmt
   25          | iteration-stmt
   26          | return-stmt

   27 expression-stmt: expression SEMICOLON
   28                | SEMICOLON

   29 selection-stmt: IF LP expression RP statement
   30               | IF LP expression RP statement ELSE statement

   31 iteration-stmt: WHILE LP expression RP statement

   32 return-stmt: RETURN SEMICOLON
   33            | RETURN expression SEMICOLON

   34 expression: var ASSIGN expression
   35           | simple-expression

   36 var: ID
   37    | ID LBRAK expression RBRAK

   38 simple-expression: additive-expression relop additive-expression
   39                  | additive-expression

   40 relop: LE
   41      | LT
   42      | GT
   43      | GE
   44      | EQUAL
   45      | NOTEQUAL

   46 additive-expression: additive-expression addop term
   47                    | term

   48 addop: PLUS
   49      | MINUS

   50 term: term mulop factor
   51     | factor

   52 mulop: TIMES
   53      | DIV

   54 factor: LP expression RP
   55       | var
   56       | call
   57       | NUM

   58 call: ID LP args RP

   59 args: arg-list
   60     | ε

   61 arg-list: arg-list COMMA expression
   62         | expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <name> (258) 6 7 10 15 16 36 37 58
    CONST (259)
    NUM <expr> (260) 7 57
    ERROR (261)
    ELSE (262) 30
    FOR (263)
    IF (264) 29 30
    INT (265) 8
    RETURN (266) 32 33
    VOID (267) 9 12
    WHILE (268) 31
    PLUS (269) 48
    MINUS (270) 49
    TIMES (271) 52
    DIV (272) 53
    ASSIGN (273) 34
    LT (274) 41
    LE (275) 40
    GT (276) 42
    GE (277) 43
    EQUAL (278) 44
    NOTEQUAL (279) 45
    SEMICOLON (280) 6 7 27 28 32 33
    COMMA (281) 13 61
    LP (282) 10 29 30 31 54 58
    RP (283) 10 29 30 31 54 58
    LBRAK (284) 7 16 37
    RBRAK (285) 7 16 37
    LBRACE (286) 17
    RBRACE (287) 17


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    program <decl> (34)
        on left: 1
        on right: 0
    declaration-list <decl> (35)
        on left: 2 3
        on right: 1 2
    declaration <decl> (36)
        on left: 4 5
        on right: 2 3
    var-declaration <decl> (37)
        on left: 6 7
        on right: 4 18
    type-specifier <type> (38)
        on left: 8 9
        on right: 6 7 10 15 16
    fun-declaration <decl> (39)
        on left: 10
        on right: 5
    params <plist> (40)
        on left: 11 12
        on right: 10
    param-list <plist> (41)
        on left: 13 14
        on right: 11 13
    param <plist> (42)
        on left: 15 16
        on right: 13 14
    compound-stmt <stmt> (43)
        on left: 17
        on right: 10 23
    local-declarations <decl> (44)
        on left: 18 19
        on right: 17 18
    statement-list <stmt> (45)
        on left: 20 21
        on right: 17 20
    statement <stmt> (46)
        on left: 22 23 24 25 26
        on right: 20 29 30 31
    expression-stmt <stmt> (47)
        on left: 27 28
        on right: 22
    selection-stmt <stmt> (48)
        on left: 29 30
        on right: 24
    iteration-stmt <stmt> (49)
        on left: 31
        on right: 25
    return-stmt <stmt> (50)
        on left: 32 33
        on right: 26
    expression <expr> (51)
        on left: 34 35
        on right: 27 29 30 31 33 34 37 54 61 62
    var <expr> (52)
        on left: 36 37
        on right: 34 55
    simple-expression <expr> (53)
        on left: 38 39
        on right: 35
    relop <d> (54)
        on left: 40 41 42 43 44 45
        on right: 38
    additive-expression <expr> (55)
        on left: 46 47
        on right: 38 39 46
    addop <d> (56)
        on left: 48 49
        on right: 46
    term <expr> (57)
        on left: 50 51
        on right: 46 47 50
    mulop <d> (58)
        on left: 52 53
        on right: 50
    factor <expr> (59)
        on left: 54 55 56 57
        on right: 50 51
    call <expr> (60)
        on left: 58
        on right: 56
    args <expr> (61)
        on left: 59 60
        on right: 58
    arg-list <expr> (62)
        on left: 61 62
        on right: 59 61


State 0

    0 $accept: • program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program           go to state 3
    declaration-list  go to state 4
    declaration       go to state 5
    var-declaration   go to state 6
    type-specifier    go to state 7
    fun-declaration   go to state 8


State 1

    8 type-specifier: INT •

    $default  reduce using rule 8 (type-specifier)


State 2

    9 type-specifier: VOID •

    $default  reduce using rule 9 (type-specifier)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declaration-list •
    2 declaration-list: declaration-list • declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var-declaration  go to state 6
    type-specifier   go to state 7
    fun-declaration  go to state 8


State 5

    3 declaration-list: declaration •

    $default  reduce using rule 3 (declaration-list)


State 6

    4 declaration: var-declaration •

    $default  reduce using rule 4 (declaration)


State 7

    6 var-declaration: type-specifier • ID SEMICOLON
    7                | type-specifier • ID LBRAK NUM RBRAK SEMICOLON
   10 fun-declaration: type-specifier • ID LP params RP compound-stmt

    ID  shift, and go to state 11


State 8

    5 declaration: fun-declaration •

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declaration-list: declaration-list declaration •

    $default  reduce using rule 2 (declaration-list)


State 11

    6 var-declaration: type-specifier ID • SEMICOLON
    7                | type-specifier ID • LBRAK NUM RBRAK SEMICOLON
   10 fun-declaration: type-specifier ID • LP params RP compound-stmt

    SEMICOLON  shift, and go to state 12
    LP         shift, and go to state 13
    LBRAK      shift, and go to state 14


State 12

    6 var-declaration: type-specifier ID SEMICOLON •

    $default  reduce using rule 6 (var-declaration)


State 13

   10 fun-declaration: type-specifier ID LP • params RP compound-stmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 15

    type-specifier  go to state 16
    params          go to state 17
    param-list      go to state 18
    param           go to state 19


State 14

    7 var-declaration: type-specifier ID LBRAK • NUM RBRAK SEMICOLON

    NUM  shift, and go to state 20


State 15

    9 type-specifier: VOID •
   12 params: VOID •

    RP        reduce using rule 12 (params)
    $default  reduce using rule 9 (type-specifier)


State 16

   15 param: type-specifier • ID
   16      | type-specifier • ID LBRAK RBRAK

    ID  shift, and go to state 21


State 17

   10 fun-declaration: type-specifier ID LP params • RP compound-stmt

    RP  shift, and go to state 22


State 18

   11 params: param-list •
   13 param-list: param-list • COMMA param

    COMMA  shift, and go to state 23

    $default  reduce using rule 11 (params)


State 19

   14 param-list: param •

    $default  reduce using rule 14 (param-list)


State 20

    7 var-declaration: type-specifier ID LBRAK NUM • RBRAK SEMICOLON

    RBRAK  shift, and go to state 24


State 21

   15 param: type-specifier ID •
   16      | type-specifier ID • LBRAK RBRAK

    LBRAK  shift, and go to state 25

    $default  reduce using rule 15 (param)


State 22

   10 fun-declaration: type-specifier ID LP params RP • compound-stmt

    LBRACE  shift, and go to state 26

    compound-stmt  go to state 27


State 23

   13 param-list: param-list COMMA • param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type-specifier  go to state 16
    param           go to state 28


State 24

    7 var-declaration: type-specifier ID LBRAK NUM RBRAK • SEMICOLON

    SEMICOLON  shift, and go to state 29


State 25

   16 param: type-specifier ID LBRAK • RBRAK

    RBRAK  shift, and go to state 30


State 26

   17 compound-stmt: LBRACE • local-declarations statement-list RBRACE

    $default  reduce using rule 19 (local-declarations)

    local-declarations  go to state 31


State 27

   10 fun-declaration: type-specifier ID LP params RP compound-stmt •

    $default  reduce using rule 10 (fun-declaration)


State 28

   13 param-list: param-list COMMA param •

    $default  reduce using rule 13 (param-list)


State 29

    7 var-declaration: type-specifier ID LBRAK NUM RBRAK SEMICOLON •

    $default  reduce using rule 7 (var-declaration)


State 30

   16 param: type-specifier ID LBRAK RBRAK •

    $default  reduce using rule 16 (param)


State 31

   17 compound-stmt: LBRACE local-declarations • statement-list RBRACE
   18 local-declarations: local-declarations • var-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 21 (statement-list)

    var-declaration  go to state 32
    type-specifier   go to state 33
    statement-list   go to state 34


State 32

   18 local-declarations: local-declarations var-declaration •

    $default  reduce using rule 18 (local-declarations)


State 33

    6 var-declaration: type-specifier • ID SEMICOLON
    7                | type-specifier • ID LBRAK NUM RBRAK SEMICOLON

    ID  shift, and go to state 35


State 34

   17 compound-stmt: LBRACE local-declarations statement-list • RBRACE
   20 statement-list: statement-list • statement

    ID         shift, and go to state 36
    NUM        shift, and go to state 37
    IF         shift, and go to state 38
    RETURN     shift, and go to state 39
    WHILE      shift, and go to state 40
    SEMICOLON  shift, and go to state 41
    LP         shift, and go to state 42
    LBRACE     shift, and go to state 26
    RBRACE     shift, and go to state 43

    compound-stmt        go to state 44
    statement            go to state 45
    expression-stmt      go to state 46
    selection-stmt       go to state 47
    iteration-stmt       go to state 48
    return-stmt          go to state 49
    expression           go to state 50
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 35

    6 var-declaration: type-specifier ID • SEMICOLON
    7                | type-specifier ID • LBRAK NUM RBRAK SEMICOLON

    SEMICOLON  shift, and go to state 12
    LBRAK      shift, and go to state 14


State 36

   36 var: ID •
   37    | ID • LBRAK expression RBRAK
   58 call: ID • LP args RP

    LP     shift, and go to state 57
    LBRAK  shift, and go to state 58

    $default  reduce using rule 36 (var)


State 37

   57 factor: NUM •

    $default  reduce using rule 57 (factor)


State 38

   29 selection-stmt: IF • LP expression RP statement
   30               | IF • LP expression RP statement ELSE statement

    LP  shift, and go to state 59


State 39

   32 return-stmt: RETURN • SEMICOLON
   33            | RETURN • expression SEMICOLON

    ID         shift, and go to state 36
    NUM        shift, and go to state 37
    SEMICOLON  shift, and go to state 60
    LP         shift, and go to state 42

    expression           go to state 61
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 40

   31 iteration-stmt: WHILE • LP expression RP statement

    LP  shift, and go to state 62


State 41

   28 expression-stmt: SEMICOLON •

    $default  reduce using rule 28 (expression-stmt)


State 42

   54 factor: LP • expression RP

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    expression           go to state 63
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 43

   17 compound-stmt: LBRACE local-declarations statement-list RBRACE •

    $default  reduce using rule 17 (compound-stmt)


State 44

   23 statement: compound-stmt •

    $default  reduce using rule 23 (statement)


State 45

   20 statement-list: statement-list statement •

    $default  reduce using rule 20 (statement-list)


State 46

   22 statement: expression-stmt •

    $default  reduce using rule 22 (statement)


State 47

   24 statement: selection-stmt •

    $default  reduce using rule 24 (statement)


State 48

   25 statement: iteration-stmt •

    $default  reduce using rule 25 (statement)


State 49

   26 statement: return-stmt •

    $default  reduce using rule 26 (statement)


State 50

   27 expression-stmt: expression • SEMICOLON

    SEMICOLON  shift, and go to state 64


State 51

   34 expression: var • ASSIGN expression
   55 factor: var •

    ASSIGN  shift, and go to state 65

    $default  reduce using rule 55 (factor)


State 52

   35 expression: simple-expression •

    $default  reduce using rule 35 (expression)


State 53

   38 simple-expression: additive-expression • relop additive-expression
   39                  | additive-expression •
   46 additive-expression: additive-expression • addop term

    PLUS      shift, and go to state 66
    MINUS     shift, and go to state 67
    LT        shift, and go to state 68
    LE        shift, and go to state 69
    GT        shift, and go to state 70
    GE        shift, and go to state 71
    EQUAL     shift, and go to state 72
    NOTEQUAL  shift, and go to state 73

    $default  reduce using rule 39 (simple-expression)

    relop  go to state 74
    addop  go to state 75


State 54

   47 additive-expression: term •
   50 term: term • mulop factor

    TIMES  shift, and go to state 76
    DIV    shift, and go to state 77

    $default  reduce using rule 47 (additive-expression)

    mulop  go to state 78


State 55

   51 term: factor •

    $default  reduce using rule 51 (term)


State 56

   56 factor: call •

    $default  reduce using rule 56 (factor)


State 57

   58 call: ID LP • args RP

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    $default  reduce using rule 60 (args)

    expression           go to state 79
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56
    args                 go to state 80
    arg-list             go to state 81


State 58

   37 var: ID LBRAK • expression RBRAK

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    expression           go to state 82
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 59

   29 selection-stmt: IF LP • expression RP statement
   30               | IF LP • expression RP statement ELSE statement

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    expression           go to state 83
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 60

   32 return-stmt: RETURN SEMICOLON •

    $default  reduce using rule 32 (return-stmt)


State 61

   33 return-stmt: RETURN expression • SEMICOLON

    SEMICOLON  shift, and go to state 84


State 62

   31 iteration-stmt: WHILE LP • expression RP statement

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    expression           go to state 85
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 63

   54 factor: LP expression • RP

    RP  shift, and go to state 86


State 64

   27 expression-stmt: expression SEMICOLON •

    $default  reduce using rule 27 (expression-stmt)


State 65

   34 expression: var ASSIGN • expression

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    expression           go to state 87
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 66

   48 addop: PLUS •

    $default  reduce using rule 48 (addop)


State 67

   49 addop: MINUS •

    $default  reduce using rule 49 (addop)


State 68

   41 relop: LT •

    $default  reduce using rule 41 (relop)


State 69

   40 relop: LE •

    $default  reduce using rule 40 (relop)


State 70

   42 relop: GT •

    $default  reduce using rule 42 (relop)


State 71

   43 relop: GE •

    $default  reduce using rule 43 (relop)


State 72

   44 relop: EQUAL •

    $default  reduce using rule 44 (relop)


State 73

   45 relop: NOTEQUAL •

    $default  reduce using rule 45 (relop)


State 74

   38 simple-expression: additive-expression relop • additive-expression

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    var                  go to state 88
    additive-expression  go to state 89
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 75

   46 additive-expression: additive-expression addop • term

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    var     go to state 88
    term    go to state 90
    factor  go to state 55
    call    go to state 56


State 76

   52 mulop: TIMES •

    $default  reduce using rule 52 (mulop)


State 77

   53 mulop: DIV •

    $default  reduce using rule 53 (mulop)


State 78

   50 term: term mulop • factor

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    var     go to state 88
    factor  go to state 91
    call    go to state 56


State 79

   62 arg-list: expression •

    $default  reduce using rule 62 (arg-list)


State 80

   58 call: ID LP args • RP

    RP  shift, and go to state 92


State 81

   59 args: arg-list •
   61 arg-list: arg-list • COMMA expression

    COMMA  shift, and go to state 93

    $default  reduce using rule 59 (args)


State 82

   37 var: ID LBRAK expression • RBRAK

    RBRAK  shift, and go to state 94


State 83

   29 selection-stmt: IF LP expression • RP statement
   30               | IF LP expression • RP statement ELSE statement

    RP  shift, and go to state 95


State 84

   33 return-stmt: RETURN expression SEMICOLON •

    $default  reduce using rule 33 (return-stmt)


State 85

   31 iteration-stmt: WHILE LP expression • RP statement

    RP  shift, and go to state 96


State 86

   54 factor: LP expression RP •

    $default  reduce using rule 54 (factor)


State 87

   34 expression: var ASSIGN expression •

    $default  reduce using rule 34 (expression)


State 88

   55 factor: var •

    $default  reduce using rule 55 (factor)


State 89

   38 simple-expression: additive-expression relop additive-expression •
   46 additive-expression: additive-expression • addop term

    PLUS   shift, and go to state 66
    MINUS  shift, and go to state 67

    $default  reduce using rule 38 (simple-expression)

    addop  go to state 75


State 90

   46 additive-expression: additive-expression addop term •
   50 term: term • mulop factor

    TIMES  shift, and go to state 76
    DIV    shift, and go to state 77

    $default  reduce using rule 46 (additive-expression)

    mulop  go to state 78


State 91

   50 term: term mulop factor •

    $default  reduce using rule 50 (term)


State 92

   58 call: ID LP args RP •

    $default  reduce using rule 58 (call)


State 93

   61 arg-list: arg-list COMMA • expression

    ID   shift, and go to state 36
    NUM  shift, and go to state 37
    LP   shift, and go to state 42

    expression           go to state 97
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 94

   37 var: ID LBRAK expression RBRAK •

    $default  reduce using rule 37 (var)


State 95

   29 selection-stmt: IF LP expression RP • statement
   30               | IF LP expression RP • statement ELSE statement

    ID         shift, and go to state 36
    NUM        shift, and go to state 37
    IF         shift, and go to state 38
    RETURN     shift, and go to state 39
    WHILE      shift, and go to state 40
    SEMICOLON  shift, and go to state 41
    LP         shift, and go to state 42
    LBRACE     shift, and go to state 26

    compound-stmt        go to state 44
    statement            go to state 98
    expression-stmt      go to state 46
    selection-stmt       go to state 47
    iteration-stmt       go to state 48
    return-stmt          go to state 49
    expression           go to state 50
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 96

   31 iteration-stmt: WHILE LP expression RP • statement

    ID         shift, and go to state 36
    NUM        shift, and go to state 37
    IF         shift, and go to state 38
    RETURN     shift, and go to state 39
    WHILE      shift, and go to state 40
    SEMICOLON  shift, and go to state 41
    LP         shift, and go to state 42
    LBRACE     shift, and go to state 26

    compound-stmt        go to state 44
    statement            go to state 99
    expression-stmt      go to state 46
    selection-stmt       go to state 47
    iteration-stmt       go to state 48
    return-stmt          go to state 49
    expression           go to state 50
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 97

   61 arg-list: arg-list COMMA expression •

    $default  reduce using rule 61 (arg-list)


State 98

   29 selection-stmt: IF LP expression RP statement •
   30               | IF LP expression RP statement • ELSE statement

    ELSE  shift, and go to state 100

    ELSE      [reduce using rule 29 (selection-stmt)]
    $default  reduce using rule 29 (selection-stmt)

    shift/reduce conflict on token ELSE:
       29 selection-stmt: IF LP expression RP statement •
       30 selection-stmt: IF LP expression RP statement • ELSE statement
      Example: IF LP expression RP IF LP expression RP statement • ELSE statement
      Shift derivation
        selection-stmt
        ↳ 29: IF LP expression RP statement
                                  ↳ 24: selection-stmt
                                        ↳ 30: IF LP expression RP statement • ELSE statement
      Reduce derivation
        selection-stmt
        ↳ 30: IF LP expression RP statement                                   ELSE statement
                                  ↳ 24: selection-stmt
                                        ↳ 29: IF LP expression RP statement •



State 99

   31 iteration-stmt: WHILE LP expression RP statement •

    $default  reduce using rule 31 (iteration-stmt)


State 100

   30 selection-stmt: IF LP expression RP statement ELSE • statement

    ID         shift, and go to state 36
    NUM        shift, and go to state 37
    IF         shift, and go to state 38
    RETURN     shift, and go to state 39
    WHILE      shift, and go to state 40
    SEMICOLON  shift, and go to state 41
    LP         shift, and go to state 42
    LBRACE     shift, and go to state 26

    compound-stmt        go to state 44
    statement            go to state 101
    expression-stmt      go to state 46
    selection-stmt       go to state 47
    iteration-stmt       go to state 48
    return-stmt          go to state 49
    expression           go to state 50
    var                  go to state 51
    simple-expression    go to state 52
    additive-expression  go to state 53
    term                 go to state 54
    factor               go to state 55
    call                 go to state 56


State 101

   30 selection-stmt: IF LP expression RP statement ELSE statement •

    $default  reduce using rule 30 (selection-stmt)
